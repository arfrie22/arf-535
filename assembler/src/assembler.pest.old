

instruction = ${ opcode ~ WHITESPACE+ ~ arguments }
arguments = { argument ~ (WHITESPACE* ~ argument)* }
argument = { register | f_register | timer | number | indirect }
register = ${ ^"R" ~ ("1" | "2") | (^"A" | ^"D")~('1'..'4') | ^"PC" | ^"LR" | ^"ST" | ^"SP" }
f_register = ${ ^"F" ~ ASCII_DIGIT{1,2} }
timer = ${ ^"T" ~ ASCII_DIGIT{1,2} }

opcode = { ASCII_ALPHA+ }
indirect = { "[" ~ WHITESPACE* ~ register ~ (WHITESPACE* ~ "+" ~ WHITESPACE* ~ number ~ (WHITESPACE* ~ "<<" ~ WHITESPACE* ~ number)?)? ~ WHITESPACE* ~ "]" }

number = ${ hex_number | binary_number | digit_number }
digit_number = ${ ASCII_DIGIT+ }
hex_number = ${ "0x" ~ ASCII_HEX_DIGIT+ }
binary_number = ${ "0b" ~ ASCII_BIN_DIGIT+ }

WHITESPACE = _{" " | "\t"}